"""adicionando index, check e trigger

Revision ID: 6e27bea3d57a
Revises: 22ae2e02d384
Create Date: 2025-01-29 20:40:02.159176

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6e27bea3d57a'
down_revision: Union[str, None] = '22ae2e02d384'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('idx_estoque_produto', 'estoque', ['id_produto'], unique=False)
    op.create_index('idx_venda_loja', 'venda', ['id_loja'], unique=False)

    op.create_check_constraint(
        'chk_quantidade_positiva',
        'estoque',
        'quantidade >= 0'
    )

    op.execute("""
    CREATE OR REPLACE FUNCTION atualiza_estoque_venda_func()
    RETURNS TRIGGER AS $$
    BEGIN
        UPDATE estoque
        SET quantidade = quantidade - NEW.quantidade
        WHERE id_loja = (SELECT id_loja FROM venda WHERE id_venda = NEW.id_venda)
        AND id_produto = NEW.id_produto;
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    """)

    op.execute("""
    CREATE TRIGGER atualiza_estoque_venda
    AFTER INSERT ON item_venda
    FOR EACH ROW
    EXECUTE FUNCTION atualiza_estoque_venda_func();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_venda_loja', table_name='venda')
    op.drop_index('idx_estoque_produto', table_name='estoque')

    # Removendo a constraint CHECK
    op.drop_constraint('chk_quantidade_positiva', 'estoque', type_='check')
    
    # Remover a trigger
    op.execute("""
    DROP TRIGGER IF EXISTS atualiza_estoque_venda ON item_venda;
    """)

    # Remover a função
    op.execute("""
    DROP FUNCTION IF EXISTS atualiza_estoque_venda_func;
    """)
    # ### end Alembic commands ###
